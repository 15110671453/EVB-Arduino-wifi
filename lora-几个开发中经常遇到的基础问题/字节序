字节序 

我们一般在软件开发不考虑

因为 多是网络传输  网络传输


在计算机内存中，每个字节都是有地址的。也就是说一个整型的4个字节的地址是不同的，有高低地址之分。对于一个整数，如632523，其对应的二进制位1001 10100110 11001011。需要3个字节才能放得下。这时就存在一个问题，对于低8位11001011是存放在整型的那4个字节的低地址位还是高地址位。

如果将低8位存放在4个字节中的低地址位，称为小端字节序，如果将低8位存放在高地址位，则为大端字节序。助记：沿着内存的增长方向，先存低8位是的小端；先存高8位的是大端。大小端字节序是由CPU决定的[1][2][3]。

虽然不同的CPU厂商可以随意选择一种字节序作为自己的内存字节序，但是网络字节序就不能任由各个CPU选择，网络字节序被规定为大端字节序。


###########注意1###########
注意 在我们软件开发IOS  网页js 后台服务器java php  皆不用考虑字节序

因为 我们一般 都是用网络传输数据 而网络传输 都规定了统一tcp 客户端 与 服务端 默认大端字节
###########注意1###########


我们在串口传输中 多半要考虑字节序 

我们的lora  模块是 小端字节序


我们的Arduino 单片节 微控制器 模块是 小端字节序

###########注意2###########

计算机电路先处理低8位字节 效率比较高 因为计算机都是从低位开始的

所以计算机的内部处理都是小端字节序

但是人类 在数学上 写法 处理 加减乘除 都是大端字节序 对于一千零八十

我们人类 都是先写 高8位一千 依次进行 阅读 处理 计算

沿着内存的增长方向，先存低8位是的小端；先存高8位的是大端


###########注意3###########

只有读取的时候 才必须区分字节序 其他情况不用考虑  ；这里的读取 是指字节流


比如  我们底层 tcp 的socket ；  还有我们的 串口 读写数据是 都是在写字节流

因此 这时需要考虑字节序






