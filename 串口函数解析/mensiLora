#include <SPI.h>

#include <SoftwareSerial.h>


//第三方开发库安装目录   /Users/admindyn/Documents/Arduino/libraries

//默认 UART 设置如下:
//串口速率 9600 bps，8 位数据，无校验位，1 个终止位。

//#######针对我们主控 与 lora模块的 通信引脚定义

//aux 针对lorawifi模块的检验码输出引脚
//主控 对 lora的 输出 aux 主控输入 模块输出
#define MInPUTAUX 2



//将引脚设置为输出引脚 针对lorawifi模块的输入RX引脚
//主控 对 lora的 输出 tx 主控输出 模块输入
#define MOUTPUTTX 4


//主控 从 lora的输入 rx 主控输入 模块输出
//将引脚设置为输入引脚 针对lorawifi模块的输出tx引脚
#define MInPUTRX 3
//主控 对lora模块指示灯
#define MLED 7
//主控串口频率 - 与计算机串口 硬串口频率
#define MRATE 9600
//软串口频率
#define MRuanRATE 9600

#define POLY 0xa001

#define datapackage_headflag 0xFF        //用于串口通信时，定义数据包头部的验证标记 前导码

#define datapackage_startflag1 0xFF

#define datapackage_startflag2 0xAA

#define datapackage_endflag 0x40

#define buf_length 12

//##########针对LoraWan报文数据结构定义############

struct Pkg{
    byte headflag;
    byte startflag1;
    byte startflag2;
    byte commandflag;
    byte conlengthflag;
    char* content;
    short int crcflag;
    byte endflag;
};
int sizeD;

char * dataBuff;
//##########针对LoraWan功能指令定义############

static byte CRO_FW = 0x01 ; //用来读取固件信息的比如硬件版本 固件版本

static byte CRO_RD = 0x02 ;//读命令 来读取频率信息

static byte CIO_WM = 0x03; //读写LoraWan工作状态的信息

static byte CNO_DS = 0x04 ; //读写模块状态信息

//##########针对LoraWan功能 加入/加入重置指令定义############

static byte CCP_LJ = 0x05 ; //加入命令

static byte CCP_JR = 0x06 ;//重新入网命令
//##########针对LoraWan功能 发射指令定义############

static byte CCP_LTC = 0x07 ;//发送一个confirmed数据包 意味着报文 以确认包的格式发送

static byte CCP_LTU = 0x08; //发送一个unconfirmed数据包 意味着报文以非确认包的格式发出

//#########针对LoraWan功能 通知主控指令 我们现在开发主控端 来控制公司的Lorawan模块发射报文 命令发给模块 模块会反馈给我们的消息 就在这里#########
static byte EV_LJ = 0x10 ; // 入网的第二个回复包

static byte EV_LT = 0x11; //发送的回复包

static byte EV_LINK = 0x12 ; //链接状态命令字

//##########主控端与Lora模块之间交互 一些默认状态 标识符###########

static byte FRM_OK = 0x00; //操作成功

static byte FRM_ERRO_FRM = 0x01; //帧错误

static byte FRM_ERRO_CRC = 0x02; //CRC错误

static byte FRM_ERRO_CMD = 0x03; //不支持的命令

static byte FRM_ERRO_ADDR = 0x04; //寄存器地址错误

static byte FRM_ERRO_REGLen = 0x05; //寄存器长度超限

static byte FRM_ERRO_INVALID = 0x06; //参数值超限


static byte FRM_ERRO_BUSY = 0x07; //设备忙

static byte T_ERRO_NOCHAN = 0x08; //无空闲信道

static byte T_ERRO_NOKEY = 0x09; //无密钥


static byte JOIN_ERRO_ACTIVED = 0x0A; //已经激活


static byte T_ERRO_UNACTIVED = 0x0B; //发送时错误 设备没有入网


static byte JOIN_ERRO_DEN = 0x11; //入网失败

static byte T_ERRO_FAIL = 0x12; // 发送失败


static byte T_OK_TRX = 0x13; //发送成功 且受到server的下行数据

static byte T_OK_RXPEND = 0x14; //server还有数据要发

static byte LINK_ALIVE = 0x31; //链接状态良好

static byte LINK_DEAD = 0x32; //链接已断开

static byte LINK_ERRO_MIC = 0x33; //链路层校验和错误 检查密钥




//############针对Lorawan模块的固件寄存器地址##########


static byte ModuleType  = 0; //模块型号

static byte HardwareVersion = 1;//硬件版本

static byte FirmwareVersion = 2; //固件版本

static byte DevEUI[8] = {3, 4, 5, 6, 7, 8, 9, 10}; //只读Mac地址

static byte APPEUI[8] = {11, 12, 13, 14, 15, 16, 17, 18}; //应用标识

static byte DevAddr[4] = {19, 20, 21, 22}; //网络地址

static  byte NetID[4] = {23, 24, 25, 26}; //网络ID

static byte NwksKey[16] = {27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42}; //网络层密钥

//############针对Lorawan模块的无线寄存器地址##########

static byte DR = 0; //下一包发送的DR

static byte ChanIndex = 5; //当前信道

int ledPWM = 0;

int STATE = 1;

byte payloadPort = 100;



char *buf_string;

char *p;

byte mes_data[] = {};

bool debug_once=0;

SoftwareSerial mySerial = SoftwareSerial(MInPUTRX, MOUTPUTTX);

void setup() {
  // put your setup code here, to run once:
  //设置串口通信的频率 与计算机建立通信
  Serial.begin(MRATE);
  //aux 针对lorawifi模块的检验码输出引脚
  pinMode(MInPUTAUX , INPUT);

  //将引脚设置为输出引脚 针对lorawifi模块的输入RX引脚
  // pinMode(MOUTPUTTX, OUTPUT);
  //将引脚设置为输入引脚 针对lorawifi模块的输出tx引脚

  //pinMode(MInPUTRX, INPUT);
  char str[] = {'H','C','R','I','C'};
  
  p=str;


  Pkg Mydata;

/*
   byte headflag;
    byte startflag1;
    byte startflag2;
    byte commandflag;
    byte conlengthflag;
    char* content;
    short int crcflag;
    byte endflag;
*/
  Mydata.headflag = datapackage_headflag;
  
  Mydata.startflag1 = datapackage_startflag1;
  
  Mydata.startflag2 = datapackage_startflag2;
  
 // Mydata.commandflag = CCP_LTU|0xC0;

  Mydata.commandflag=CRO_FW|0x40;
  
  Mydata.conlengthflag = strlen(p);
  
  Mydata.content=p;
  
  unsigned short crcD =  ModBusCRC(p, strlen(p));
  
  Mydata.crcflag=crcD;

  Mydata.endflag=datapackage_endflag;

  sizeD =1+1+1+1+1+strlen(p)+sizeof(unsigned short)+1;

  Serial.println(sizeD);
 
  dataBuff = new char[sizeD];

  int offsetLen=0;
  *(byte*)(dataBuff+offsetLen)=Mydata.headflag;
  offsetLen=offsetLen+sizeof(byte);
  
  *(byte*)(dataBuff+offsetLen)=Mydata.startflag1;
   offsetLen=offsetLen+sizeof(byte);
   
  *(byte*)(dataBuff+offsetLen)=Mydata.startflag2;
   offsetLen=offsetLen+sizeof(byte);
   
  *(byte*)(dataBuff+offsetLen)=Mydata.commandflag;
  offsetLen=offsetLen+sizeof(byte);
  
  *(byte*)(dataBuff+offsetLen)=Mydata.conlengthflag;
  offsetLen=offsetLen+sizeof(byte);
  
   memcpy(dataBuff+offsetLen,p , strlen(p));
  offsetLen=offsetLen+strlen(p);
  
  *(unsigned short*)(dataBuff+offsetLen)=Mydata.crcflag;
  offsetLen=offsetLen+sizeof(unsigned short);
  *(byte*)(dataBuff+offsetLen)=Mydata.endflag;
  
  

  buf_string = (char*)malloc(buf_length*sizeof(char));



  Serial.println("PING Demo");

  mySerial.println("Softer Serial Hello, world?");
  
  Serial.println(dataBuff);

  //我们自定义接小灯泡 证明 电路没有问题
  pinMode(MLED, OUTPUT);
  mySerial.begin(MRuanRATE);

  mySerial.listen();



 



}

void testLoraBaoWen()
{




}





unsigned short ModBusCRC(unsigned char *buf, unsigned int lenth) {


  int i, j;


  unsigned short crc;


  for (i = 0, crc = 0xffff; i < lenth; i++) {

    crc ^= buf[i];

    for (j = 0; j < 8; j++) {


      if (crc & 0x01)
        crc = (crc >> 1) ^ POLY;
      else
        crc >>= 1;

    }
  }

  return crc;
}







void loop() {
  // put your main code here, to run repeatedly:
  //将13引脚输出高电平 即将小灯点亮
  //小灯长脚为正短脚为负

  //写数字接口
  digitalWrite(MLED, HIGH);
  delay(1000);

  digitalWrite(MLED, LOW);
  delay(1000);
  //写模拟接口 模拟值 PWM脉冲
  analogWrite(MLED, ledPWM);
  delay(100);



  ledPWM++;
  if (ledPWM > 10) {
    ledPWM = 0;

  }
  //读模拟接口数据

  //int rxData = analogRead(MInPUTRX);
  //Serial.println(rxData);

  //int auxData = analogRead(MInPUTAUX);
  //Serial.println(auxData);

  //  int rxdata = digitalRead(MInPUTRX);
  //
  //  Serial.println(rxdata);
  //
  //  int auxdata = digitalRead(MInPUTAUX);
  //
  //  Serial.println(auxdata);

  // print it out in many formats:

   Serial.println("++++++++load++++++++");
  if(!(mySerial.available()>0)){
     Serial.println("loading");
    mySerial.write(dataBuff);


    
  }

 
  
  if(!debug_once)
  {
     Serial.println("loadData1");
 
  Serial.write("ABC");
 
  Serial.println(Serial.read());
  Serial.println("loadData2");
  delay(2);

  
  Serial.write("ABC",3);
  Serial.println(Serial.read());
  Serial.println("loadData3");
  
   while (Serial.available() > 0)
  {
    Serial.println("loadData4");
    Serial.println(Serial.read());
    delay(2);

  }
  }

  debug_once=1;
   byte offset=0;
   Serial.println("MyData1");
  while (mySerial.available()>0)
  {
      
    char inByte= mySerial.read();
    *(char*)(buf_string + offset)=inByte;
   
   
    offset=offset+sizeof(char);
    ;
     Serial.println(inByte,HEX);
     Serial.println("data len");
     
     Serial.println(strlen(buf_string),HEX);
     
    if(strlen(buf_string)-1==buf_length)
    {
      Serial.println("data free");
      free(buf_string);
      offset=0;
      buf_string = (char*)malloc(buf_length);

      }

      delay(2);
  }


  
  Serial.println("BufString1");
  if (strlen(buf_string) > 0)
  {
    Serial.println("BufString2");
    
    Serial.println(*buf_string,HEX);

    // Deal_UART_RecData();
  }
    Serial.println("BufString3");



}
//比较指令头部
byte CompareCMD_head(char CMD_head[])
{
  unsigned char CharNum;
  for (CharNum = 0; CharNum < 4; CharNum++) //指令长度为10个字符
  {
    if (!(buf_string[CharNum + 4] == CMD_head[CharNum]))
    {
      return 0;  //指令头部匹配失败
    }
  }
  return 1;        //指令头部匹配成功
}
//比较指令尾部(start:从哪里开始比较，quality:比较多少个字符，CMD_tail[]：要比较的字符串)
byte CompareCMD_tail(unsigned char start, unsigned char quality, char CMD_tail[])
{
  unsigned char CharNum;
  for (CharNum = 0; CharNum < quality; CharNum++)
  {
    if (!(buf_string[start + CharNum] == CMD_tail[CharNum]))
    {
      return 0;
    }
  }
  return 1;
}

//比较指令头部
byte CompareCMD_headbyte(char CMD_head)
{
  if (!(buf_string[3] == CMD_head))
  {
    return 0;  //指令头部匹配失败
  }

  return 1;        //指令头部匹配成功
}
//比较指令尾部(start:从哪里开始比较，quality:比较多少个字符，CMD_tail[]：要比较的字符串)
byte CompareCMD_tailbyte(unsigned char start, unsigned char quality, char CMD_tail)
{

  if (!(buf_string[strlen(buf_string)] == CMD_tail))
  {
    return 0;
  }

  return 1;
}

byte Deal_UART_RecData()   //处理串口接收数据包函数（成功处理数据包则返回1，否则返回0）
{
  //http://www.cnblogs.com/weifeng727/p/5618062.html
  //PutString(buf_string);
  int lengthBuf = strlen(buf_string);

  if (buf_string[0] == 'FF' && buf_string[lengthBuf] == datapackage_endflag) //进行数据包头尾标记验证
  {
    switch (buf_string[1])       //识别发送起始符的第1位数字
    {
      case datapackage_startflag1:
        switch (buf_string[2])       //识别发送起始符的第2位数字
        {
          case datapackage_startflag2:

            if (CompareCMD_headbyte(CIO_WM))   //判断指令头部是否为"Ligt"
            {
              //下面是指令尾部分析
              switch (buf_string[4])
              {
                case '0':
                  switch (buf_string[9])
                  {
                    case '0':

                      return 0;
                    case '1':


                      if (CompareCMD_tailbyte(10, 3, datapackage_endflag)) //A03_Ligt01Off_#
                      {
                        //要执行的代码
                        return 1;
                      }
                      if (CompareCMD_tailbyte(10, 3, datapackage_endflag))
                      {

                        return 1;
                      }
                      return 0;
                    default:
                      return 0;
                  }


                default:

                  byte legth = buf_string[4];


                  for (int j = 0; j < legth; j++)
                  {

                    mes_data[j] = buf_string[4 + j + 1];

                  }

                  return 0;
              }
            }
            //###########这里添加对每个功能指令的  继续 拆包############


        }
        return 0;

      default:
        return 0;
    }

  }
}





/************************
  184         中断函数
  185 ************************/
//串口中断服务函数-----------

